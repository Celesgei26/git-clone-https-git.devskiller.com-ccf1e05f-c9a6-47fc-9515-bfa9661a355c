<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tres en Raya</title>
    <style>
        #board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-gap: 5px;
        }
        .cell {
            width: 100px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            border: 1px solid #000;
        }
        .active {
            background-color: lightgreen;
        }
        #status {
            margin-top: 20px;
            font-size: 18px;
        }
        #resetButton {
            display: none;
            margin-top: 20px;
        }
    </style>
</head>
<body>

<div id="status">Turno de: Jugador 1 (X)</div>
<div id="board"></div>
<button id="resetButton">Reiniciar Juego</button>

<script>
    const boardElement = document.getElementById('board');
    const statusElement = document.getElementById('status');
    const resetButton = document.getElementById('resetButton');
    const player1 = 'X';
    const player2 = 'O';
    let currentPlayer = player1;
    let board = Array(3).fill(null).map(() => Array(3).fill(null));
    let gameActive = true;

    // Inicializar el tablero
    function initBoard() {
        boardElement.innerHTML = '';
        for (let row = 0; row < 3; row++) {
            for (let col = 0; col < 3; col++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.row = row;
                cell.dataset.col = col;
                cell.addEventListener('click', handleCellClick);
                boardElement.appendChild(cell);
            }
        }
        updateStatus();
        resetButton.style.display = 'none';
        gameActive = true;
    }

    // Manejar el clic en la celda
    function handleCellClick(event) {
        if (!gameActive) return;

        const cell = event.target;
        const row = cell.dataset.row;
        const col = cell.dataset.col;

        if (board[row][col] !== null) return;

        board[row][col] = currentPlayer;
        cell.textContent = currentPlayer;
        cell.style.pointerEvents = 'none'; // Desactivar clics en la celda

        if (checkWin()) {
            statusElement.textContent = `¡Jugador ${currentPlayer} gana!`;
            gameActive = false;
            resetButton.style.display = 'block';
        } else if (checkDraw()) {
            statusElement.textContent = '¡Es un empate!';
            gameActive = false;
            resetButton.style.display = 'block';
        } else {
            currentPlayer = currentPlayer === player1 ? player2 : player1;
            updateStatus();
        }
    }

    // Actualizar el estado del juego
    function updateStatus() {
        statusElement.textContent = `Turno de: Jugador ${currentPlayer} (${currentPlayer})`;
        document.querySelectorAll('.cell').forEach(cell => {
            cell.classList.remove('active');
        });
        const currentPlayerCells = [...document.querySelectorAll('.cell')]
            .filter(cell => cell.textContent === currentPlayer);
        currentPlayerCells.forEach(cell => {
            cell.classList.add('active');
        });
    }

    // Verificar si hay un ganador
    function checkWin() {
        const winningConditions = [
            // Horizontal
            [[0, 0], [0, 1], [0, 2]],
            [[1, 0], [1, 1], [1, 2]],
            [[2, 0], [2, 1], [2, 2]],
            // Vertical
            [[0, 0], [1, 0], [2, 0]],
            [[0, 1], [1, 1], [2, 1]],
            [[0, 2], [1, 2], [2, 2]],
            // Cuadrados 2x2
            [[0, 0], [0, 1], [1, 0], [1, 1]],
            [[0, 1], [0, 2], [1, 1], [1, 2]],
            [[1, 0], [1, 1], [2, 0], [2, 1]],
            [[1, 1], [1, 2], [2, 1], [2, 2]],
        ];

        return winningConditions.some(condition => {
            const [a, b, c, d] = condition;
            const player = board[a[0]][a[1]];
            return player !== null &&
                player === board[b[0]][b[1]] &&
                player === board[c[0]][c[1]] &&
                (d ? player === board[d[0]][d[1]] : true);
        });
    }

    // Verificar si el juego termina en empate
    function checkDraw() {
        return board.flat().every(cell => cell !== null);
    }

    // Reiniciar el juego
    resetButton.addEventListener('click', initBoard);
    initBoard();
</script>

</body>
</html>
